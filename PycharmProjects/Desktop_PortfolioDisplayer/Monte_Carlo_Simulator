from tkinter import Tk, Frame, Label, ttk, Button, Entry, StringVar, messagebox, BooleanVar
from datetime import datetime, timedelta
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import yfinance as yf  # For Retrieving Data from Yahoo Finance
import numpy as np

class MonteCarloSimulator:
    def __init__(self, master):
        # Creating the Main Window
        self.master = master
        self.master.title("Portfolio Displayer")
        self.master.geometry("800x800+200+100")

        # Generating the master_grid
        self.mstr_grid = Frame(master, width=1000, height=1250)
        self.mstr_grid.grid()
        for i in range(20):
            self.mstr_grid.grid_rowconfigure(i, weight=1, minsize=35)
        for i in range(13):
            self.mstr_grid.grid_columnconfigure(i, weight=1, minsize=80)
        self.mstr_grid.grid_propagate(False)

        # Create the Form Title
        self.lbl_title = Label(self.mstr_grid, text="MONTE-CARLO MARKET SIMULATOR", font=('Helvetica', 10))
        self.lbl_title.grid(row=0, column=0, columnspan=13, sticky='news')

        # Create the container box_grid
        self.box_grid = Frame(self.mstr_grid, width=750, height=1000)
        self.box_grid.grid_propagate(False)
        self.box_grid.grid(row=2, column=1, columnspan=11, rowspan=15, sticky='nw')

        # TimePeriod_Label and Selector
        self.lbl_time_prd = Label(self.mstr_grid, text="Time Period")
        self.lbl_time_prd.grid(row=13, column=1, columnspan=3, sticky='s')
        
        self.prd_select = StringVar()
        self.period_ddbox = ttk.Combobox(self.mstr_grid, width=15, textvariable=self.prd_select)
        self.period_ddbox['values'] = ('1MO', '3MO', '6MO', '1YR', '5YR')
        self.period_ddbox.grid(row=14, column=1, columnspan=3, sticky='news')
        self.period_ddbox.current(1)

        # Ticker_Label and InputBox
        self.lbl_ticker = Label(self.mstr_grid, text="Ticker")
        self.lbl_ticker.grid(row=13, column=5, columnspan=3, sticky='s')
        
        self.entry_stock = Entry(self.mstr_grid, justify='center')
        self.entry_stock.grid(row=14, column=5, columnspan=3, sticky='news')

        # Percentage View Toggle
        self.percentage_var = BooleanVar(value=False)
        self.percentage_checkbox = ttk.Checkbutton(
            self.mstr_grid, 
            text="%MeanVw", 
            variable=self.percentage_var
        )
        self.percentage_checkbox.grid(row=15, column = 8, columnspan=5, sticky='n')

        # Simulate Button
        self.btn_pltport = Button(
            self.mstr_grid, 
            text="S I M U L A T E", 
            font=('Helvetica', 7), 
            command=self.simulate_stock
        )
        self.btn_pltport.grid(row=14, column=9, columnspan=3, sticky='n')

        # Store last simulation data for potential replotting
        self.last_simulation_data = None

    def clear_box_grid(self):
        """Clears old Monte Carlo Simulation Analysis Chart off of Container Box"""
        for widget in self.box_grid.winfo_children():
            widget.destroy()

    def fetch_stock_data(self, ticker, period):
        """Fetches Relevant Historic and Present Market Data given a ticker and time frame"""
        # Convert period to yfinance compatible format
        period_map = {
            '1MO': '1mo',
            '3MO': '3mo',
            '6MO': '6mo',
            '1YR': '1y',
            '5YR': '5y'
        }
        
        try:
            # Fetch stock data
            stock = yf.Ticker(ticker)
            hist_data = stock.history(period=period_map[period])
            
            if hist_data.empty:
                messagebox.showerror("Error", "No data found for the given ticker and period")
                return None
            
            return hist_data
        except Exception as e:
            messagebox.showerror("Error", f"Failed to fetch stock data: {str(e)}")
            return None

    def monte_carlo_simulation(self, hist_data, days_to_simulate):
        """Perform Monte Carlo simulation"""
        # Calculate daily returns
        returns = hist_data['Close'].pct_change().dropna()
        
        # Get initial stock price
        initial_price = hist_data['Close'].iloc[-1]
        
        # Calculate mean and standard deviation of returns
        mean_return = returns.mean()
        std_return = returns.std()
        
        # Number of simulations
        num_simulations = 1000  # Increased for more precision
        
        # Simulation matrix
        simulations = np.zeros((num_simulations, days_to_simulate))
        
        # Run simulations
        for i in range(num_simulations):
            # Generate random daily returns
            daily_returns = np.random.normal(mean_return, std_return, days_to_simulate)
            
            # Calculate price path
            price_path = initial_price * (1 + daily_returns).cumprod()
            simulations[i, :] = price_path
        
        return simulations, initial_price

    def plot_monte_carlo(self, hist_data, simulations, initial_price, ticker):
        """Tallies and Plots the Statistical Price Range Envelopes"""
        # Clear previous plots
        self.clear_box_grid()
        
        # Determine if we're using percentage view
        use_percentage = self.percentage_var.get()
        
        # Create figure and axes
        fig, ax = plt.subplots(figsize=(10, 6), dpi=100)
        
        # Prepare dates
        historical_dates = hist_data.index
        sim_days = len(simulations[0])
        last_hist_date = historical_dates[-1]
        sim_dates = [last_hist_date + timedelta(days=i+1) for i in range(sim_days)]
        
        if use_percentage:
            # Calculate base for percentage (average of historical prices)
            base_price = hist_data['Close'].mean()
            
            # Convert historical prices to percentage
            historical_percentages = (hist_data['Close'].values / base_price - 1) * 100
            
            # Convert simulations to percentage
            simulations_percentages = (simulations / base_price - 1) * 100
            
            # Plot historical percentage
            ax.plot(historical_dates, historical_percentages, color='black', label='Historical % Change', linewidth=2)
            
            # Calculate percentile paths for percentages
            percentiles = [
                np.percentile(simulations_percentages, 10, axis=0),
                np.percentile(simulations_percentages, 25, axis=0),
                np.percentile(simulations_percentages, 50, axis=0),
                np.percentile(simulations_percentages, 75, axis=0),
                np.percentile(simulations_percentages, 90, axis=0)
            ]
            
            # Formatting
            ax.set_title(f'Monte Carlo Simulation: {ticker} (% from Avg Price)')
            ax.set_ylabel('Percentage Change (%)')
        else:
            # Plot historical prices
            ax.plot(historical_dates, hist_data['Close'], color='black', label='Historical Price', linewidth=2)
            
            # Calculate percentile paths for prices
            percentiles = [
                np.percentile(simulations, 10, axis=0),
                np.percentile(simulations, 25, axis=0),
                np.percentile(simulations, 50, axis=0),
                np.percentile(simulations, 75, axis=0),
                np.percentile(simulations, 90, axis=0)
            ]
            
            # Formatting
            ax.set_title(f'Monte Carlo Simulation: {ticker}')
            ax.set_ylabel('Stock Price')
        
        # Plot percentile ranges with transparency
        colors = ['#FF000033', '#FF000022', '#FF000011', '#0000FF11', '#0000FF22']
        labels = ['10th-90th', '25th-75th', 'Median']
        
        for i in range(len(percentiles) - 2):
            ax.fill_between(
                sim_dates, 
                percentiles[i], 
                percentiles[-(i+1)], 
                color=colors[i], 
                label=labels[i]
            )
        
        # Plot median path
        ax.plot(sim_dates, percentiles[2], color='blue', linestyle='--', label='Median Projection')
        
        # Formatting
        ax.set_xlabel('Date')
        ax.legend()
        
        # Rotate and align the tick labels
        fig.autofmt_xdate()
        
        # Use a more precise date format
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        
        # Create canvas and add to box_grid
        canvas = FigureCanvasTkAgg(fig, master=self.box_grid)
        canvas.draw()
        canvas.get_tk_widget().pack(side='top', fill='both', expand=True)

    def simulate_stock(self):
        """Main simulation function triggered by button click"""
        # Get ticker and period
        ticker = self.entry_stock.get().upper()
        period = self.prd_select.get()
        
        # Validate input
        if not ticker:
            messagebox.showwarning("Warning", "Please enter a stock ticker")
            return
        
        # Fetch historical data
        hist_data = self.fetch_stock_data(ticker, period)
        if hist_data is None:
            return
        
        # Determine simulation days (1/3 of historical period)
        days_to_simulate = len(hist_data) // 3
        
        # Run Monte Carlo simulation
        simulations, initial_price = self.monte_carlo_simulation(hist_data, days_to_simulate)
        
        # Plot results
        self.plot_monte_carlo(hist_data, simulations, initial_price, ticker)

def main():
    root = Tk()
    app = MonteCarloSimulator(root)
    root.mainloop()

if __name__ == "__main__":
    main()